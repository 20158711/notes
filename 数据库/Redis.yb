WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
echo "vm.overcommit_memory = 1" vm./etc/sysctl.conf //重启生效
sysctl vm.overcommit_memory=1       //立即生效

redis.conf 
    prot 6379-->    prot 6380
    requirepass yb3685110
    # masterauth <master-password>  //主从配置时从机配置主机的密码


redis-server &  //后台运行 ctrl+c
redis-server --port port    //用port端口启动
redis-server redis.conf     //指定用redis.conf配置文件来启动，感觉配置文件没有生效是可能是由于启动时没有使用配置文件


redis-cli -p port -h host -a password         //转接host的port端口

redis-cli [-p port] shutdown    //关闭redis，数据将自动持久话[指定端口]

redis-cli
    //系统命令
    ping >> PONG
    select dbid   //选择db   0~databases(redis.conf)
    flushdb     //清空当前db信息
    flushall    //清空所有db信息
    info        //系统信息  Keyspace    db
    dbsize      //当前db数据的数量
    save        //手动持久化
    shutdown    //关闭redis，数据将自动持久话
    

    //键命令
    set key value
    del key //返回值为删除的数量
    keys *  
        error   (error) NOAUTH Authentication required.  //没有输入密码的连接
    keys key
    get key
    exists key      //判断key是否存在  1/0
    ttl key         //剩余生存时间 s  
        -1表示长期
        -2表示不存在
    expire key time //设置key的生存时间为time秒
    type key        //返回key的数据类型
    randomkey       //随机返回一个key
    rename oldname newname  //重命名
    renamenx oldname newname    //nx表示带判断，带判断的重命名，若newname已经存在则返回0表示失败

    setex key time value          //ex=expire,设置key-value时同时设置生存时间
    psetex key time value         //p表示以毫秒为单位，ex=expire,设置key-value时同时设置生存时间
    getrange key start end          //string型，返回key的[start,end]的数据
    strlen key                      //返回string的长度
    append key str                  //在key的值后添加str
    getset key value                //为key设置value,返回值是旧的value
    mset key1 value1 key2 value2 ...    //同时设置多个key-value
    mget key1 key2 key3 ...             //同时得到多个value
    setnx key value                 //当前库不存在key时才返回1表示成功，若已有key则返回0表示失败
    msetnx key1 value1 key2 value2  //具有原子性，同时成功1和同时失败0

    incr key            //若为数字型则增1，否则报错
    incrby key step       //若为数字型则增step，否则报错
    decr key            //若为数字型则减1，否则报错
    decrby key step     //若为数字型则减step，否则报错

    //hash哈希
    hset map name value 
    hmset map key1 value1 key2 value2   //设置多个map
    hsetnx map key value    //带判断的hset
    hexists map name    //判断map name是否存在 1/0 
    hget map name       //获得map name的值
    hmget map key1 key2 //获得多个map的值
    hgetall map         //获得所有的map信息，包含key value
    hkeys map           //获得map的所有keys
    hdel map key1 key2  //删除map
    hvals map           //获得map的所有values
    hlen map            //获得map中的数量

    list(可重复)下标从0开始 

    lpush key v1 v2 v3  //添加v1,v2,v3到key 后进先出
    llen key            //返回key的长度
    lrange key s e      //返回key[s,e]
    lset key index val  //将key的索引为Index的元素改为val
    lindex key index    //获取key的第index元素
    lpop key            //移出并返回下标为0的元素
    rpop key            //移出并返回最后一个元素

    set(无序，无重复)

    sadd key a b c d    //添加元素到集合key,返回值为添加成功的个数
    scard key           //返回集合元素数量
    smembers key        //返回集合所有元素
    sdiff key1 key2     //返回key1 与 key2 的差集（除去key1中与key2相同的元素）
    sinter key1 key2    //返回key1 与 key2 的交集
    sunion key1 key2    //返回key1 与 key2 的并集
    srandmember key num //随机返回key中的num个元素
    sismember key val   //判断val是不是key的元素
    srem key val1 val2  //移除key中的val1,val2元素  rem=remove
    spop key            //移除并返回一个随机元素

    zset(有序集合,元素不能重复，分数能重复，通过附加一个score来排序，升序)

    zadd key score1 val1 score2 val2    //创建集合 
    zcard key                           //返回元素个数
    zscore key val                      //查看key中val的socre值
    zcount key min max                  //返回score值在[min,max]元素个数
    zrand key val                       //返回val的索引，0开始
    zincrby key num val                 //将val的score值加num,并自动调整顺序
    zrange key s e [withscores]         //返回key[s,e]的元素[带socre值,顺序：val1 score1 key2 core2]

