Docker镜像：
	
	
	Docker镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。

Docker容器：
	镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等镜像是类，容器是实例

	容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己独立的命名空间。

Docker仓库(Docker Registry)
	每个仓库包含多个标签，第个标签对应一个镜像
	<仓库名>:<标签>   标签默认为latest

	加速器：/etc/docker/daemon.json
	{
		"registry-mirrors":[
			"https://registry.docker-cn.com"
		]
	}

拉取镜像：
	docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]

运行：
	docker run -it --rm \
	ubuntu:16.04 \
	bash

	-it  ：这是两个参数，一个是-i：交互式操作，一个是-t终端。我们这里打算进入
	bash 执行一些命令并查看返回结果，因此我们需要交互式终端。

	--rm：这个参数是说 [容器] 退出后随之将其删除。默认情况下，为了排障需求，退的容器并不会立即删除，除非手动docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用  --rm  可以避免浪费空间。

	ubuntu:16.04  ：这是指用  ubuntu:16.04  镜像为基础来启动容器。

	bash：放在镜像名后的是命令,这里我们希望有个交互式Shell，因此用的是bash。

	
	docker run --name webserver -d -p 80:80 nginx
	docker run --name webserver -d -p 81:80 nginx

	以nginx镜像启动一个名为webserver的窗口，并映射80端口。
	第一个地址是host的地址，第二个地址是窗口的地址


	docker exec -it webserver bash

	我们以交互式终端方式进入webserver容器，并执行了bash命令，也就是获得一个可操作的 Shell。

列出已下载镜像：
	docker image ls
	列表包含了  仓库名、 标签、 镜像 ID、 创建时间  以及  所占用的空间  。

	docker image ls ubuntu
	列出ubuntu镜像

	docker image ls -f since=ubuntu:16.04
	-f == --filter
		since 	自xx以后的镜像
		before	自xx以前的镜像
	-q 只显示标签
	--digests 显示消息摘要
	--format "{{.ID}}:{{.Repository}}"
	--format "table {{.ID}}\t{{.Repository}}\t{{.Tag}}"
	
查看镜像、容器、数据卷所占用的空间。
	
	docker system df

删除虚悬镜像
	
	docker image prune

删除镜像
	docker image rm [选项] <镜像1> [<镜像2>]
	ID 一般取前3个字符以上，只要足够区分于别的镜像就可以了
	我们也可以用镜像名，也就是  <仓库名>:<标签>  ，来删除镜像。

	与 docker image ls 组合
	删除所有仓库名为  redis  的镜像：
	docker image rm $(docker image ls -q redis)

	删除所有在  mongo:3.2  之前的镜像
	docker image rm $(docker image ls -q -f before=mongo:3.2)


将窗口保存为镜像
	 Docker 提供了一个  docker commit  命令，可以将容器的存储层保存下来成为镜像。
	 docker commit [选项] <容器ID或容器名> [<仓库名>[:<标签>]]
	 docker commit \
		--author "Tao Wang <twang2218@gmail.com>" \
		--message "修改了默认网页" \
		webserver \
		nginx:v2

	其中  --author  是指定修改的作者，而--message则是记录本次修改的内容。这点和git版本控制相似，不过这里这些信息可以省略留空。

docker history  具体查看镜像内的历史记录

	docker history nginx:v2


Dockerfile定制镜像
	
	Dockerfile 是一个文本文件，其内包含了一条条的指令Instruction，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。

	1，# 创建一个文件夹并在其中建一个Dockerfile文件

		mkdir mynginx
		cd mynginx
		touch Dockerfile

	
		FROM nginx
		RUN echo '<h1>Hello Dockerfile!</h1>' > /usr/share/nginx/html/index.html

		FROM 指定基础镜像，Docker必备的指令，且必须是第一条

			# Docker还存在一个特殊的镜像，名为scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。

			# 如果你以scratch为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。

		RUN  指令是用来执行命令行命令的，Dockerfile文件中可以有多个 RUN 一个　RUN就是一层 。两种格式

			shell 格式： RUN <命令>  ，就像直接在命令行中输入的命令一样。
			RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html

				example:

					FROM debian:jessie
					RUN apt-get update
					RUN apt-get install -y gcc libc6-dev make
					RUN wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz"
					RUN mkdir -p /usr/src/redis
					RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1
					RUN make -C /usr/src/redis
					RUN make -C /usr/src/redis install

				有7层，不推荐，改为

					RUN buildDeps='gcc libc6-dev make' \
					&& apt-get update \
					&& apt-get install -y $buildDeps \
					&& wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz" \
					&& mkdir -p /usr/src/redis \
					&& tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \
					&& make -C /usr/src/redis \
					&& make -C /usr/src/redis install \
					&& rm -rf /var/lib/apt/lists/* \
					&& rm redis.tar.gz \
					&& rm -r /usr/src/redis \
					&& apt-get purge -y --auto-remove $buildDeps

					\ 用于换行  # 用于注释


		exec 格式： RUN ["可执行文件", "参数1", "参数2"]  ，这更像是函数调用中的格式。

	2, # 使用Dockerfile创建镜像（在Dockerfile文件所在目录进行)

		docker build [选项] <上下文路径/URL/->

		docker build -t nginx:v3 .

		# docker build 命令纯属有一个点 . 表示当前目录

		# docker build  命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。

		# 当构建的时候，用户会指定构建镜像上下文的路径， dockerbuild 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。

		# 如果在  Dockerfile  中这么写：

			COPY ./package.json /app/

		# 这并不是要复制执行  docker build  命令所在的目录下的  package.json  ，也不是复制Dockerfile  所在目录下的  package.json  ，而是复制 上下文（context） 目录下的package.json  

		# COPY ../package.json /app  或者  COPY /opt/xxxx /app  
		# 无法工作的原因（上下文理解不正解）

		如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用  .gitignore 一样的语法写一个  .dockerignore  ，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。

		-f 指定Dockerfile 文件

		实际上  Dockerfile  的文件名并不要求必须为  Dockerfile ，而且并不要求必须位于上下文目录中，比如可以用  -f ../Dockerfile.php  参数指定某个文件作为Dockerfile 

	3, # Git repo 构建

		docker build https://github.com/twang2218/gitlab-ce-zh.git#:8.14

		# 这行命令指定了构建所需的 Git repo，并且指定默认的  master  分支，构建目录为  /8.14/ ，然后 Docker 就会自己去  git clone  这个项目、切换到指定分支、并进入到指定目录后开始构建。

	4, tar 构建 

		docker build http://server/context.tar.gz

		# Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。

	5, 从标准输入中读取 Dockfile 进行构建

		docker build - < Dockerfile

		# 如果标准输入传入的是文本文件，则将其视为  Dockerfile  ，并开始构建
		# 没有上下文，因此不可以像其他方法那样可以将本地文件  COPY  进镜像之类的事情。

		cat Dockerfile | docker build -

		# 如果发现标准输入的文件格式是  gzip  、 bzip2  以及  xz  的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。

	6, COPY 复制文件

		COPY <源路径>... <目标路径>
		
		COPY ["<源路径1>",... "<目标路径>"]

		COPY package.json /usr/src/app/

		COPY hom* /mydir/
		
		COPY hom?.txt /mydir/

		# <目标路径>  可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用  WORKDIR  指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。

		# 使用  COPY  指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等

	7, ADD 添加文件

		ADD 与 COPY 基本一样 ( 可以从URL下载文件并添加到指定目录中 下载文件的默认权限为 600 
		如果是压缩文件 将自动解压再复制到指定文件 COPY 不会解压 )

	8, CMD 命令

		shell  格式： CMD <命令>
		
		exec  格式： CMD ["可执行文件", "参数1", "参数2"...]  推荐方式
		
		# 参数列表格式： CMD ["参数1", "参数2"...]  。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。
		
		# CMD  指令就是用于指定默认的容器主进程的启动命令的。

		# 正确的做法是直接执行  nginx  可执行文件，并且要求以前台形式运行。
		# 比如：CMD ["nginx", "-g", "daemon off;"]